// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Role {
  id          String       @id @default(uuid())
  name        String       @unique @db.VarChar(100)
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt

  // Relaciones
  users       User[]
  permissions Permission[]
}

model User {
  id          String     @id @default(uuid())
  email       String     @unique @db.VarChar(100)
  first_name  String     @db.VarChar(100)
  last_name   String?    @db.VarChar(100)
  password    String     @db.VarChar(200)
  isActive    Boolean    @default(true)
  roleId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Role        Role       @relation(fields: [roleId], references: [id])
  Loans       Loan[]
}

model Student {
  id          String     @id @default(uuid())
  email       String     @unique @db.VarChar(100)
  first_name  String     @db.VarChar(100)
  last_name   String     @db.VarChar(100)
  address     String     @db.VarChar(100)
  phone       String     @db.VarChar(20)
  degreeId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Degree      Degree     @relation(fields: [degreeId], references: [id])
  Loans       Loan[]
}

model Loan {
  id          String     @id @default(uuid())
  userId      String
  studentId   String
  bookId      String
  loan_start  DateTime   @default(now())
  loan_end    DateTime?
  statusId    String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  User        User       @relation(fields: [userId], references: [id])
  Student     Student    @relation(fields: [studentId], references: [id])
  Book        Book       @relation(fields: [bookId], references: [id])
  Status      Status     @relation(fields: [statusId], references: [id])
  History     Loan_Student_History[]
}

model Loan_Student_History {
  id          String     @id @default(uuid())
  loanId      String
  start_date  DateTime   @default(now())
  end_date    DateTime?
  action      String     @db.VarChar(100)
  details     String     @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Loan        Loan       @relation(fields: [loanId], references: [id])
}

model Book {
  id             String     @id @default(uuid())
  title          String     @db.VarChar(255)
  author         String     @db.VarChar(255)
  classification String     @db.VarChar(100)
  statusId       String
  stock          Int        @default(0)
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relaciones
  Status         Status     @relation(fields: [statusId], references: [id])
  Loans          Loan[]
}

model Status {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(100)
  description String     @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Loans       Loan[]
  Books       Book[]
}

model University {
  id          String     @id @default(uuid())
  name        String     @unique @db.VarChar(100)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Degrees     Degree[]
}

model Degree {
  id             String     @id @default(uuid())
  name           String     @unique @db.VarChar(100)
  universityId   String
  createdAt      DateTime   @default(now())
  updatedAt      DateTime   @updatedAt

  // Relaciones
  University     University @relation(fields: [universityId], references: [id])
  Students       Student[]
}

model Menu {
  id          String     @id @default(uuid())
  label       String     @unique @db.VarChar(100) // corresponde a "Nombre"
  icon        String     @db.VarChar(100)         // corresponde a "Icono"
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Submenus    Submenu[]
}

model Submenu {
  id          String     @id @default(uuid())
  label       String     @unique @db.VarChar(100) // corresponde a "Nombre"
  icon        String     @db.VarChar(100)
  url         String     @db.Text                // se utiliza en lugar de "NombreFormulario"
  menuId      String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Menu        Menu       @relation(fields: [menuId], references: [id])
  Permissions Permission[]
}

model Permission {
  id          String     @id @default(uuid())
  submenuId   String
  roleId      String
  is_active   Boolean    @default(true)
  name        String     @unique @db.VarChar(100)
  description String     @db.VarChar(255)
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt

  // Relaciones
  Submenu     Submenu    @relation(fields: [submenuId], references: [id])
  Role        Role       @relation(fields: [roleId], references: [id])
}